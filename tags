!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/vadim/GoProjects/user_microserver/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
Config	internal/config/config.go	/^type Config struct {$/;"	s	package:config
Database_Name	internal/config/config.go	/^	Database_Name string `env:"POSTGRES_DB"`$/;"	m	struct:config.Config	typeref:typename:string
Env	internal/config/config.go	/^	Env string `env:"ENV"`$/;"	m	struct:config.Config	typeref:typename:string
EnvLoad	internal/config/config.go	/^func EnvLoad() *Config {$/;"	f	package:config	typeref:typename:*Config
IdleTimeout	internal/config/config.go	/^	IdleTimeout       time.Duration `env:"IDLE_TIMEOUT"`$/;"	m	struct:config.Config	typeref:typename:time.Duration
Postgres_Host	internal/config/config.go	/^	Postgres_Host string `env:"POSTGRES_HOST"`$/;"	m	struct:config.Config	typeref:typename:string
Postgres_Password	internal/config/config.go	/^	Postgres_Password string `env:"POSTGRES_PASSWORD"`$/;"	m	struct:config.Config	typeref:typename:string
Postgres_Port	internal/config/config.go	/^	Postgres_Port string `env:"POSTGRES_PORT"`$/;"	m	struct:config.Config	typeref:typename:string
Postgres_User	internal/config/config.go	/^	Postgres_User string `env:"POSTGRES_USER"`$/;"	m	struct:config.Config	typeref:typename:string
Server_Address	internal/config/config.go	/^	Server_Address string `env:"SERVER_ADDR"`$/;"	m	struct:config.Config	typeref:typename:string
Server_Port	internal/config/config.go	/^	Server_Port string `env:"SERVER_PORT"`$/;"	m	struct:config.Config	typeref:typename:string
SetupPrettyLogger	pkg/prettylogger/handler/logger/logger.go	/^func SetupPrettyLogger(env string) *slog.Logger {$/;"	f	package:slogpretty	typeref:typename:*slog.Logger
Timeout	internal/config/config.go	/^	Timeout           time.Duration `env:"TIMEOUT"`$/;"	m	struct:config.Config	typeref:typename:time.Duration
config	internal/config/config.go	/^package config$/;"	p
envDev	pkg/prettylogger/handler/logger/logger.go	/^	envDev   = "dev"$/;"	c	package:slogpretty
envDev	pkg/prettylogger/logger.go	/^	envDev   = "dev"$/;"	c	package:slogpretty
envDev	pkg/prettylogger/logger/logger.go	/^	envDev   = "dev"$/;"	c	package:logger
envLocal	pkg/prettylogger/handler/logger/logger.go	/^	envLocal = "local"$/;"	c	package:slogpretty
envLocal	pkg/prettylogger/logger.go	/^	envLocal = "local"$/;"	c	package:slogpretty
envLocal	pkg/prettylogger/logger/logger.go	/^	envLocal = "local"$/;"	c	package:logger
envProd	pkg/prettylogger/handler/logger/logger.go	/^	envProd  = "prod"$/;"	c	package:slogpretty
envProd	pkg/prettylogger/logger.go	/^	envProd  = "prod"$/;"	c	package:slogpretty
envProd	pkg/prettylogger/logger/logger.go	/^	envProd  = "prod"$/;"	c	package:logger
logger	pkg/prettylogger/logger/logger.go	/^package logger$/;"	p
main	cmd/main.go	/^func main() {$/;"	f	package:main
main	cmd/main.go	/^package main$/;"	p
postgres	internal/postgres/postgres.go	/^package postgres$/;"	p
setupPrettyLogger	pkg/prettylogger/logger.go	/^func setupPrettyLogger(env string) *slog.Logger {$/;"	f	package:slogpretty	typeref:typename:*slog.Logger
setupPrettyLogger	pkg/prettylogger/logger/logger.go	/^func setupPrettyLogger(env string) *slog.Logger {$/;"	f	package:logger	typeref:typename:*slog.Logger
setupPrettySlog	pkg/prettylogger/handler/logger/logger.go	/^func setupPrettySlog() *slog.Logger {$/;"	f	package:slogpretty	typeref:typename:*slog.Logger
setupPrettySlog	pkg/prettylogger/logger.go	/^func setupPrettySlog() *slog.Logger {$/;"	f	package:slogpretty	typeref:typename:*slog.Logger
setupPrettySlog	pkg/prettylogger/logger/logger.go	/^func setupPrettySlog() *slog.Logger {$/;"	f	package:logger	typeref:typename:*slog.Logger
slogpretty	pkg/prettylogger/handler/logger/logger.go	/^package slogpretty$/;"	p
slogpretty	pkg/prettylogger/logger.go	/^package slogpretty$/;"	p
